@include describe("The to-number function") {
  @include it("should cast a string to a number") {
    @include should(expect(to-number("")), to(equal(0)));
    @include should(expect(to-number("string")), to(equal(0)));
    @include should(expect(to-number("this is a string")), to(equal(0)));
    @include should(expect(to-number("true")), to(equal(0)));
    @include should(expect(to-number("false")), to(equal(0)));
    @include should(expect(to-number("0")), to(equal(0)));
    @include should(expect(to-number("-0")), to(equal(0)));
    @include should(expect(to-number("1")), to(equal(1)));
    @include should(expect(to-number("42")), to(equal(42)));
    @include should(expect(to-number("4.2")), to(equal(4.2)));
    @include should(expect(to-number("-42")), to(equal(-42)));
    @include should(expect(to-number("-4.2")), to(equal(-4.2)));
    @include should(expect(to-number("42em")), to(equal(42em)));
    @include should(expect(to-number("4.2em")), to(equal(4.2em)));
    @include should(expect(to-number("-42em")), to(equal(-42em)));
    @include should(expect(to-number("-4.2em")), to(equal(-4.2em)));
    @include should(expect(to-number('#000')), to(equal(0)));
    @include should(expect(to-number('#000000')), to(equal(0)));
    @include should(expect(to-number('black')), to(equal(0)));
    @include should(expect(to-number('rgb(0,0,0)')), to(equal(0)));
    @include should(expect(to-number('rgba(0,0,0,.5)')), to(equal(0)));
    @include should(expect(to-number('hsl(0,0,0)')), to(equal(0)));
    @include should(expect(to-number('hsla(0,0,0, .5)')), to(equal(0)));

    @include should(expect(type-of(to-number(""))), to(equal('number')));
    @include should(expect(type-of(to-number("string"))), to(equal('number')));
    @include should(expect(type-of(to-number("this is a string"))), to(equal('number')));
    @include should(expect(type-of(to-number("true"))), to(equal('number')));
    @include should(expect(type-of(to-number("false"))), to(equal('number')));
    @include should(expect(type-of(to-number("42"))), to(equal('number')));
    @include should(expect(type-of(to-number("0"))), to(equal('number')));
    @include should(expect(type-of(to-number("-0"))), to(equal('number')));
    @include should(expect(type-of(to-number("1"))), to(equal('number')));
    @include should(expect(type-of(to-number("4.2"))), to(equal('number')));
    @include should(expect(type-of(to-number("-42"))), to(equal('number')));
    @include should(expect(type-of(to-number("-4.2"))), to(equal('number')));
    @include should(expect(type-of(to-number("42em"))), to(equal('number')));
    @include should(expect(type-of(to-number("4.2em"))), to(equal('number')));
    @include should(expect(type-of(to-number("-42em"))), to(equal('number')));
    @include should(expect(type-of(to-number("-4.2em"))), to(equal('number')));
    @include should(expect(type-of(to-number('#000'))), to(equal('number')));
    @include should(expect(type-of(to-number('#000000'))), to(equal('number')));
    @include should(expect(type-of(to-number('black'))), to(equal('number')));
    @include should(expect(type-of(to-number('rgb(0,0,0)'))), to(equal('number')));
    @include should(expect(type-of(to-number('rgba(0,0,0,.5)'))), to(equal('number')));
    @include should(expect(type-of(to-number('hsl(0,0,0)'))), to(equal('number')));
    @include should(expect(type-of(to-number('hsla(0,0,0, .5)'))), to(equal('number')));
  }

  @include it("should cast a number to a number") {
    @include should(expect(to-number(-0)), to(equal(0)));
    @include should(expect(to-number(0)), to(equal(0)));
    @include should(expect(to-number(1)), to(equal(1)));
    @include should(expect(to-number(42)), to(equal(42)));
    @include should(expect(to-number(-42)), to(equal(-42)));
    @include should(expect(to-number(-4.2)), to(equal(-4.2)));
    @include should(expect(to-number(4.2)), to(equal(4.2)));
    @include should(expect(to-number(42em)), to(equal(42em)));
    @include should(expect(to-number(-42em)), to(equal(-42em)));
    @include should(expect(to-number(-4.2em)), to(equal(-4.2em)));
    @include should(expect(to-number(4.2em)), to(equal(4.2em)));

    @include should(expect(type-of(to-number(0))), to(equal('number')));
    @include should(expect(type-of(to-number(0))), to(equal('number')));
    @include should(expect(type-of(to-number(1))), to(equal('number')));
    @include should(expect(type-of(to-number(42))), to(equal('number')));
    @include should(expect(type-of(to-number(-42))), to(equal('number')));
    @include should(expect(type-of(to-number(-4.2))), to(equal('number')));
    @include should(expect(type-of(to-number(4.2))), to(equal('number')));
    @include should(expect(type-of(to-number(42em))), to(equal('number')));
    @include should(expect(type-of(to-number(-42em))), to(equal('number')));
    @include should(expect(type-of(to-number(-4.2em))), to(equal('number')));
    @include should(expect(type-of(to-number(4.2em))), to(equal('number')));
  }

  @include it("should cast a color to a number") {
    @include should(expect(to-number(#000)), to(equal(0)));
    @include should(expect(to-number(#000000)), to(equal(0)));
    @include should(expect(to-number(black)), to(equal(0)));
    @include should(expect(to-number(rgb(0,0,0))), to(equal(0)));
    @include should(expect(to-number(rgba(0,0,0,.5))), to(equal(0)));
    @include should(expect(to-number(hsl(0,0,0))), to(equal(0)));
    @include should(expect(to-number(hsla(0,0,0, .5))), to(equal(0)));

    @include should(expect(type-of(to-number(#000))), to(equal('number')));
    @include should(expect(type-of(to-number(#000000))), to(equal('number')));
    @include should(expect(type-of(to-number(black))), to(equal('number')));
    @include should(expect(type-of(to-number(rgb(0,0,0)))), to(equal('number')));
    @include should(expect(type-of(to-number(rgba(0,0,0,.5)))), to(equal('number')));
    @include should(expect(type-of(to-number(hsl(0,0,0)))), to(equal('number')));
    @include should(expect(type-of(to-number(hsla(0,0,0, .5)))), to(equal('number')));
  }

  @include it("should cast a list to a number") {
    @include should(expect(to-number(())), to(equal(0)));
    @include should(expect(to-number(this is a list)), to(equal(0)));

    @include should(expect(type-of(to-number(()))), to(equal('number')));
    @include should(expect(type-of(to-number(this is a list))), to(equal('number')));
  }

  @include it("should cast a map to a number") {
    @include should(expect(to-number(("a": 1, "b": 2))), to(equal(0)));
    
    @include should(expect(type-of(to-number(("a": 1, "b": 2)))), to(equal('number')));
  }

  @include it("should cast a bool to a number") {
    @include should(expect(to-number(true)), to(equal(1)));
    @include should(expect(to-number(false)), to(equal(0)));

    @include should(expect(type-of(to-number(true))), to(equal('number')));
    @include should(expect(type-of(to-number(false))), to(equal('number')));
  }

  @include it("should cast null to a number") {
    @include should(expect(to-number(null)), to(equal(0)));
    
    @include should(expect(type-of(to-number(null))), to(equal('number')));
  }
}