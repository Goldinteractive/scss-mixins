@include describe("The to-string function") {
  @include it("should cast a number to a string") {
    @include should(expect(to-string(-0)), to(equal('0')));
    @include should(expect(to-string(0)), to(equal('0')));
    @include should(expect(to-string(1)), to(equal('1')));
    @include should(expect(to-string(42)), to(equal('42')));
    @include should(expect(to-string(-42)), to(equal('-42')));
    @include should(expect(to-string(-4.2)), to(equal('-4.2')));
    @include should(expect(to-string(4.2)), to(equal('4.2')));
    @include should(expect(to-string(42em)), to(equal('42em')));
    @include should(expect(to-string(-42em)), to(equal('-42em')));
    @include should(expect(to-string(-4.2em)), to(equal('-4.2em')));
    @include should(expect(to-string(4.2em)), to(equal('4.2em')));

    @include should(expect(type-of(to-string(0))), to(equal('string')));
    @include should(expect(type-of(to-string(0))), to(equal('string')));
    @include should(expect(type-of(to-string(1))), to(equal('string')));
    @include should(expect(type-of(to-string(42))), to(equal('string')));
    @include should(expect(type-of(to-string(-42))), to(equal('string')));
    @include should(expect(type-of(to-string(-4.2))), to(equal('string')));
    @include should(expect(type-of(to-string(4.2))), to(equal('string')));
    @include should(expect(type-of(to-string(42em))), to(equal('string')));
    @include should(expect(type-of(to-string(-42em))), to(equal('string')));
    @include should(expect(type-of(to-string(-4.2em))), to(equal('string')));
    @include should(expect(type-of(to-string(4.2em))), to(equal('string')));
  }

  @include it("should cast a string to a string") {
    @include should(expect(to-string("")), to(equal("")));
    @include should(expect(to-string("string")), to(equal("string")));
    @include should(expect(to-string("this is a string")), to(equal("this is a string")));
    @include should(expect(to-string("true")), to(equal("true")));
    @include should(expect(to-string("false")), to(equal("false")));
    @include should(expect(to-string("0")), to(equal("0")));
    @include should(expect(to-string("-0")), to(equal("-0")));
    @include should(expect(to-string("1")), to(equal("1")));
    @include should(expect(to-string("42")), to(equal("42")));
    @include should(expect(to-string("4.2")), to(equal("4.2")));
    @include should(expect(to-string("-42")), to(equal("-42")));
    @include should(expect(to-string("-4.2")), to(equal("-4.2")));
    @include should(expect(to-string("42em")), to(equal("42em")));
    @include should(expect(to-string("4.2em")), to(equal("4.2em")));
    @include should(expect(to-string("-42em")), to(equal("-42em")));
    @include should(expect(to-string("-4.2em")), to(equal("-4.2em")));
    @include should(expect(to-string('#000')), to(equal('#000')));
    @include should(expect(to-string('#000000')), to(equal('#000000')));
    @include should(expect(to-string('black')), to(equal('black')));
    @include should(expect(to-string('rgb(0,0,0)')), to(equal('rgb(0,0,0)')));
    @include should(expect(to-string('rgba(0,0,0,.5)')), to(equal('rgba(0,0,0,.5)')));
    @include should(expect(to-string('hsl(0,0,0)')), to(equal('hsl(0,0,0)')));
    @include should(expect(to-string('hsla(0,0,0, .5)')), to(equal('hsla(0,0,0, .5)')));

    @include should(expect(type-of(to-string(""))), to(equal('string')));
    @include should(expect(type-of(to-string("string"))), to(equal('string')));
    @include should(expect(type-of(to-string("this is a string"))), to(equal('string')));
    @include should(expect(type-of(to-string("true"))), to(equal('string')));
    @include should(expect(type-of(to-string("false"))), to(equal('string')));
    @include should(expect(type-of(to-string("42"))), to(equal('string')));
    @include should(expect(type-of(to-string("0"))), to(equal('string')));
    @include should(expect(type-of(to-string("-0"))), to(equal('string')));
    @include should(expect(type-of(to-string("1"))), to(equal('string')));
    @include should(expect(type-of(to-string("4.2"))), to(equal('string')));
    @include should(expect(type-of(to-string("-42"))), to(equal('string')));
    @include should(expect(type-of(to-string("-4.2"))), to(equal('string')));
    @include should(expect(type-of(to-string("42em"))), to(equal('string')));
    @include should(expect(type-of(to-string("4.2em"))), to(equal('string')));
    @include should(expect(type-of(to-string("-42em"))), to(equal('string')));
    @include should(expect(type-of(to-string("-4.2em"))), to(equal('string')));
    @include should(expect(type-of(to-string('#000'))), to(equal('string')));
    @include should(expect(type-of(to-string('#000000'))), to(equal('string')));
    @include should(expect(type-of(to-string('black'))), to(equal('string')));
    @include should(expect(type-of(to-string('rgb(0,0,0)'))), to(equal('string')));
    @include should(expect(type-of(to-string('rgba(0,0,0,.5)'))), to(equal('string')));
    @include should(expect(type-of(to-string('hsl(0,0,0)'))), to(equal('string')));
    @include should(expect(type-of(to-string('hsla(0,0,0, .5)'))), to(equal('string')));
  }

  @include it("should cast a color to a string") {
    @include should(expect(to-string(#000)), to(equal('#000')));
    @include should(expect(to-string(#000000)), to(equal('#000000')));
    @include should(expect(to-string(black)), to(equal('black')));
    @include should(expect(to-string(rgb(0,0,0))), to(equal('black')));
    @include should(expect(to-string(rgba(0,0,0,.5))), to(equal('rgba(0, 0, 0, 0.5)')));
    @include should(expect(to-string(hsl(0,0,0))), to(equal('black')));
    @include should(expect(to-string(hsla(0,0,0, .5))), to(equal('rgba(0, 0, 0, 0.5)')));

    @include should(expect(type-of(to-string(#000))), to(equal('string')));
    @include should(expect(type-of(to-string(#000000))), to(equal('string')));
    @include should(expect(type-of(to-string(black))), to(equal('string')));
    @include should(expect(type-of(to-string(rgb(0,0,0)))), to(equal('string')));
    @include should(expect(type-of(to-string(rgba(0,0,0,.5)))), to(equal('string')));
    @include should(expect(type-of(to-string(hsl(0,0,0)))), to(equal('string')));
    @include should(expect(type-of(to-string(hsla(0,0,0, .5)))), to(equal('string')));
  }

  @include it("should cast a list to a string") {
    @include should(expect(type-of(to-string(()))), to(equal('string')));
    @include should(expect(type-of(to-string(this is a list))), to(equal('string')));

    @include should(expect(to-string(())), to(equal("()")));
    @include should(expect(to-string(this is a list)), to(equal('this is a list')));
  }

  @include it("should cast a bool to a string") {
    @include should(expect(to-string(true)), to(equal("true")));
    @include should(expect(to-string(false)), to(equal("false")));

    @include should(expect(type-of(to-string(true))), to(equal('string')));
    @include should(expect(type-of(to-string(false))), to(equal('string')));
  }

  @include it("should cast null to a string") {
    @include should(expect(to-string(null)), to(equal("null")));

    @include should(expect(type-of(to-string(null))), to(equal('string')));
  }

  @include it("should cast a map to a string") {
    @include should(expect(type-of(to-string(("a": 1, "b": 2)))), to(equal('string')));

    @include should(expect(to-string(("a": 1, "b": 2))), to(equal('("a": 1, "b": 2)')));
  }
}